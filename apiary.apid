FORMAT: 1A
HOST: https://fast-food-fast-api-ch3.herokuapp.com

# Fast-Food-Fast

Fast-Food-Fast is an API allowing a user to register, login to palce an order for food

## User Registration [/auth/signup]

### Register a user [POST]

You can create a user by sending a json request with an email and password. The
password must be four(4) characters and more.

+ Request (application/json)

        {
            "email": "example@gmail.com",
            "password": "123456"
        }

+ Response 201 (application/json)

        {
            "message": "Successfully registered",
            "status": "success"
        }

+ Response 202 (application/json)

        {
            "message": "Missing or wrong email format or password",
            "status": "failed"
        }

+ Response 202 (application/json)

        {
            "message": "Failed, User already exists, Please sign In",
            "status": "failed"
        }

+ Response 202 (application/json)

        {
          "message": "Content-type must be json",
          "status": "failed"
        }

## Login [/auth/login]

### Login a user [POST]
You can login a user by sending their email and password. Please take note
of the auth token for you will need it for all user requests.

+ Request (application/json)

        {
            "email": "example@gmail.com",
            "password": "123456"
        }

+ Response 201 (application/json)

        {
            "auth_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MDM0ODQ5OTYsImlhdCI6MTUwMzM5ODU4Niwic3ViIjo1fQ.GC6IEOohdo_xrz9__UeugIlir0qtJdKbEzBtLgqjt5A",
            "message": "Successfully registered",
            "status": "success"
        }

+ Response 202 (application/json)

        {
          "message": "Content-type must be json",
          "status": "failed"
        }

+ Response 401 (application/json)

        {
          "message": "Missing or wrong email format or password is less than four characters",
          "status": "failed"
        }

+ Response 401 (application/json)

        {
          "message": "User does not exist or password is incorrect",
          "status": "failed"
        }

## Logout [/auth/signout]

### Log out a user [POST]

You can log out a user by sending a request with their email and address. The
auth token will then be invalidated.

+ Request (application/json)

    + Headers

            x-access-token: Bearer JWT Token

+ Response 200 (application/json)

        {
            "message": "Successfully logged out",
            "status": "success"
        }

+ Response 403 (application/json)

        {
          "message": "Provide a valid auth token",
          "status": "failed"
        }

+ Response 403 (application/json)

        {
          "message": "Provide an authorization header",
          "status": "failed"
        }

+ Response 401 (application/json)

        {
          "message": "Signature expired, Please sign in again",
          "status": "failed"
        }

+ Response 401 (application/json)

        {
          "message": "Invalid token. Please sign in again",
          "status": "failed"
        }

## Order Resources 

You can create, read, update and orders.

NOTE: A valid token should be present in the header else a 401 or 403 response
will be returned as seen in the log out section.

### Place an order for food. [POST]
    Add a new order attached to the user

+ item_name (required, string) -  Name of food item

+ quantity (required, integer) -  Quantity of food item

+ Request (application/json)


    + Headers

            x-access-token: Bearer JWT Token

    + Body

            {
              "item_name": "Pizza",
              "quantity": 2
            }

+ Response 201 (application/json)

        {
        'status': "success",
        'message': "Order made successfully"
        }

+ Response 202 (application/json)

        {
          "message": "Content-type must be json",
          "status": "failed"
        }

+ Response 400 (application/json)

        {
          "message": "item_name or password is missing",
          "status": "failed"
        }

### List all Orders [GET]

You can get a list of all the orders that belong to users. The results are

+ Request (application/json)


    + Headers

            x-acces-token: Bearer JWT Token

+ Response 200 (application/json)

        {
        'status': "success",
        'orders': [
                    {
                        'order_id': 1,
                        'user_id': 1,
                        'item_id':1,
                        'item_name':'Pizza',
                        'quantity':2,
                        'price':25000,
                        'order_status':"New',
                        'created_at': "2018-10-05T17:55:33.120344"
                    },
                     {
                        'order_id': 2,
                        'user_id': 2,
                        'item_id':2,
                        'item_name':'Burger',
                        'quantity':2,
                        'price':20000,
                        'order_status':"New',
                        'created_at': "2018-10-05T17:55:33.120344"
                    }

                ]
        }

## Single order Resources [/ orders /{orderId}]

+ Parameters
    + order_id (required,number) - Id of the order to be returned

### Get order [GET]

You get a single order by specifying its Id.

+ Request (application/json)


    + Headers

            x-access-token: Bearer JWT Token

+ Response 200 (application/json)

        {
        'status': "success",
        'orders': [
                    {
                            'order_id': 1,
                            'user_id': 1,
                            'item_id':1,
                            'item_name':'Pizza',
                            'quantity':2,
                            'price':25000,
                            'order_status':"New',
                            'created_at': "2018-10-05T17:55:33.120344"
                        }
                ]
        }

+ Response 400 (application/json)

        {
          "message": "Please provide a valid Order Id",
          "status": "failed"
        }

### Edit a Order status [PUT]

You can update the status of the Order

+ order_status (required, string) - order status of the Order

+ Request (application/json)


    + Headers

            x-access-token: Bearer JWT Token

    + Body

            {
              "order_status": "New"
            }

+ Response 201 (application/json)

         {
          "message": "Order Status successfully updated",
          "status": "success"
        }
+ Response 202 (application/json)

        {
          "message": "Content-type must be json",
          "status": "failed"
        }

+ Response 400 (application/json)

        {
          "message": "Please provide a valid Order Id",
          "status": "failed"
        }

+ Response 404 (application/json)

        {
          "message": "The order with that id doesnt exist",
          "status": "failed"
        }

## Menu  

You can create, and read menu.

NOTE: A valid token should be present in the header and you need
all administrative privileges

### Post menu. [POST]
    Add a new order attached to the user

+ item_name (required, string) -  Name of food item

+ price (required, integer) -  Price of food item

+ Request (application/json)


    + Headers

            x-access-token: Bearer JWT Token

    + Body

            {
              "item_name": "Pizza",
              "price": 20000
            }

+ Response 201 (application/json)

        {
        'status': "success",
        'message': "Successfully registered"
        }

### Get menu [GET]

You get available menu.

+ Request (application/json)


    + Headers

            x-access-token: Bearer JWT Token

+ Response 200 (application/json)

        {
        'status': "success",
        'message': [
                    'item_id':1,
                    'item_name':"Pizza",
                    'price':20000
                ]
        }

